[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61.0"]

[project]
authors = [
  {name = "Felix Stark", email = "felix.stark@kfw.de"},
  {name = "Ingmar Mueller", email = "ingmar.mueller@kfw.de"},
  {name = "Mario Macai", email = "mario.macai@accenture.com"},
]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
dependencies = ["smart-energy.goecharger-api"]
description = "This is an integration for the Home Assistant for the go-e Charger Cloud wallbox (API v2)."
keywords = ["goecharger", "kfw", "homeassistant", "cloud"]
name = "smartenergy.goecharger"
readme = "README.md"
requires-python = ">=3.7"
version = "0.6.0"

[tool.black]
extend-exclude = "/generated/"
target-version = ["py310"]

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
# will group `import x` and `from x import` of the same module.
combine_as_imports = true
force_sort_within_sections = true
forced_separate = [
  "tests",
]
known_first_party = [
  "homeassistant",
  "tests",
]

[tool.pylint.MAIN]
ignore = [
  "tests",
]
py-version = "3.10"
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
extension-pkg-allow-list = [
  "av.audio.stream",
  "av.stream",
  "ciso8601",
  "orjson",
  "cv2",
]
fail-on = [
  "I",
]
init-hook = """\
    from pathlib import Path; \
    import sys; \
    from pylint.config import find_default_config_files; \
    sys.path.append( \
        str(Path(next(find_default_config_files())).parent.joinpath('pylint/plugins'))
    ) \
    """
jobs = 2
load-plugins = [
  "pylint.extensions.code_style",
  "pylint.extensions.typing",
]
persistent = false

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = [
  "_",
  "ev",
  "ex",
  "fp",
  "i",
  "id",
  "j",
  "k",
  "Run",
  "ip",
]

[project.optional-dependencies]
dev = ["black", "pylint", "pytest-homeassistant-custom-component", "Flask", "pre-commit", "isort"]

[project.urls]
"Bug Tracker" = "https://github.com/openkfw/smartenergy.goecharger/issues"
"Homepage" = "https://github.com/openkfw/smartenergy.goecharger"

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# consider-using-f-string - str.format sometimes more readable
# ---
# Enable once current issues are fixed:
# consider-using-namedtuple-or-dataclass (Pylint CodeStyle extension)
# consider-using-assignment-expr (Pylint CodeStyle extension)
# ---
# Temporary for the Python 3.10 update
# consider-alternative-union-syntax
disable = [
  "format",
  "abstract-method",
  "cyclic-import",
  "duplicate-code",
  "inconsistent-return-statements",
  "locally-disabled",
  "not-context-manager",
  "too-few-public-methods",
  "too-many-ancestors",
  "too-many-arguments",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-statements",
  "too-many-boolean-expressions",
  "unused-argument",
  "wrong-import-order",
  "consider-using-f-string",
  "consider-using-namedtuple-or-dataclass",
  "consider-using-assignment-expr",
  "consider-alternative-union-syntax",
]
enable = [
  #"useless-suppression",  # temporarily every now and then to clean them up
  "use-symbolic-message-instead",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = [
  "_CountingAttr", # for attrs
]
mixin-class-rgx = ".*[Mm]ix[Ii]n"

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
  "BaseException",
  "Exception",
  "HomeAssistantError",
]

[tool.pylint.TYPING]
runtime-typing = false

[tool.pylint.CODE_STYLE]
max-line-length-suggestions = 72

[tool.ruff]
target-version = "py310"

select = [
  "C", # complexity
  "D", # docstrings
  "E", # pycodestyle
  "F", # pyflakes/autoflake
  "PGH004", # Use specific rule codes when using noqa
  "PLC0414", # Useless import alias. Import alias does not rename original package.
  "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
  "SIM117", # Merge with-statements that use the same scope
  "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
  "SIM401", # Use get from dict with default instead of an if block
  "T20", # flake8-print
  "TRY004", # Prefer TypeError exception for invalid type
  "UP", # pyupgrade
  "W", # pycodestyle
]

ignore = [
  "D202", # No blank lines allowed after function docstring
  "D203", # 1 blank line required before class docstring
  "D212", # Multi-line docstring summary should start at the first line
  "D213", # Multi-line docstring summary should start at the second line
  "D404", # First word of the docstring should not be This
  "D406", # Section name should end with a newline
  "D407", # Section name underlining
  "D411", # Missing blank line before section
  "D418", # Function decorated with `@overload` shouldn't contain a docstring
  "E501", # line too long
  "E713", # Test for membership should be 'not in'
  "E731", # do not assign a lambda expression, use a def
]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.per-file-ignores]

# TODO: these files have functions that are too complex, but flake8's and ruff's
#       complexity (and/or nested-function) handling differs; trying to add a noqa doesn't work
#       because the flake8-noqa plugin then disagrees on whether there should be a C901 noqa
#       on that line.  So, for now, we just ignore C901s on these files as far as ruff is concerned.

"homeassistant/components/light/__init__.py" = ["C901"]
"homeassistant/components/mqtt/discovery.py" = ["C901"]
"homeassistant/components/websocket_api/http.py" = ["C901"]

# Allow for main entry & scripts to write to stdout
"homeassistant/__main__.py" = ["T201"]
"homeassistant/scripts/*" = ["T201"]
"script/*" = ["T20"]

[tool.ruff.mccabe]
max-complexity = 25
